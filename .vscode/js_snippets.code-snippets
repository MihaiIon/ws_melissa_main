{
  "Base | Code Separator": {
    "scope": "javascript",
    "prefix": "sep",
    "body": "// ------------------------------------------------------"
  },
  "Base | Code Separator 2": {
    "scope": "javascript",
    "prefix": "sep2",
    "body": "// ======================================================"
  },
  "Base | Import": {
    "scope": "javascript",
    "prefix": "imp",
    "body": "import { $2 } from \"$1\";$0"
  },
  "Base | Import Default": {
    "scope": "javascript",
    "prefix": "impd",
    "body": "import ${2:Module} from \"$1\";$0"
  },
  "Base | Export": {
    "scope": "javascript",
    "prefix": "exp",
    "body": "export const ${1:name} = $0;"
  },
  "Base | Export Default": {
    "scope": "javascript",
    "prefix": "expd",
    "body": "export default $0;"
  },
  "Base | Export Default As": {
    "scope": "javascript",
    "prefix": "expda",
    "body": "export { default as ${2:Component} } from \"$1\";$0"
  },
  "Base | Arrow Function": {
    "scope": "javascript",
    "prefix": "fn",
    "body": "($1) => $0"
  },
  "Base | Arrow Function (with body)": {
    "scope": "javascript",
    "prefix": "fnb",
    "body": "($1) => {$0}"
  },
  "Base | Arrow Function (returns object)": {
    "scope": "javascript",
    "prefix": "fno",
    "body": "($1) => ({$0})"
  },
  "Base | For Loop": {
    "scope": "javascript",
    "prefix": "forloop",
    "body": [
      "for (let ${1:i} = ${2:0}; $1 < ${3:length}; $1 += 1) {",
      "\tconst ${4:element} = ${5:array}[$1];\n}"
    ]
  },
  "React | Destructure From Props": {
    "scope": "javascript",
    "prefix": "dfp",
    "body": "const { $1 } = this.props;$0"
  },
  "React | Destructure From State": {
    "scope": "javascript",
    "prefix": "dfs",
    "body": "const { $1 } = this.state;$0"
  },
  "React | Destructure From Object": {
    "scope": "javascript",
    "prefix": "dfo",
    "body": "const { $2 } = $1;$0"
  },
  "React | Component Proptypes": {
    "scope": "javascript",
    "prefix": "cpt",
    "body": ["${1:${TM_FILENAME_BASE}}.propTypes = {$0};"]
  },
  "React | Component Default Props ": {
    "scope": "javascript",
    "prefix": "cdp",
    "body": ["${1:${TM_FILENAME_BASE}}.defaultProps = {$0};"]
  },
  "React | Component Did Mount": {
    "scope": "javascript",
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "React | Should Component Update": {
    "scope": "javascript",
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "React | Component Did Update": {
    "scope": "javascript",
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "React | Component Will Unmount": {
    "scope": "javascript",
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Redux | Dispatch": {
    "scope": "javascript",
    "prefix": "dispatch",
    "body": "dispatch(${1:action}($0))"
  },
  "Redux | Map State to Props": {
    "scope": "javascript",
    "prefix": "maps",
    "body": "const mapStateToProps = ({ $1 }) => ({$0});"
  },
  "Redux | Map Dispatch to Props": {
    "scope": "javascript",
    "prefix": "mapd",
    "body": "const mapDispatchToProps = dispatch => ({$0});"
  },
  "propTypeArray": {
    "scope": "javascript",
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "scope": "javascript",
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "scope": "javascript",
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "scope": "javascript",
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "scope": "javascript",
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "scope": "javascript",
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "scope": "javascript",
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "scope": "javascript",
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "scope": "javascript",
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "scope": "javascript",
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "scope": "javascript",
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "scope": "javascript",
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "scope": "javascript",
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "scope": "javascript",
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "scope": "javascript",
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "scope": "javascript",
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "scope": "javascript",
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "scope": "javascript",
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "scope": "javascript",
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "scope": "javascript",
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "scope": "javascript",
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "scope": "javascript",
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "scope": "javascript",
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "scope": "javascript",
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "scope": "javascript",
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "scope": "javascript",
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "scope": "javascript",
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "scope": "javascript",
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "scope": "javascript",
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "scope": "javascript",
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "React | Get Component Modifiers": {
    "scope": "javascript",
    "prefix": "gccn",
    "body": "getComponentClassNames() {\n\t$0\n}"
  },
  "Template | React Component": {
    "scope": "javascript",
    "prefix": "t_component",
    "body": [
      "import React, { useState, useContext } from \"react\";",
      "import PropTypes from \"prop-types\";\n",
      "function ${1:${TM_FILENAME_BASE}} (props) {",
      "\treturn (",
      "\t\t<${4:div} className=\"${3:c}-$2\">\n\t\t\t$0\n\t\t</${4:div}>",
      "\t);\n}\n",
      "${1:${TM_FILENAME_BASE}}.propTypes = {};\n",
      "export default ${1:${TM_FILENAME_BASE}};\n"
    ]
  }
}
